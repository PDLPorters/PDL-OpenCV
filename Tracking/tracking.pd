#!perl

use strict;
pp_bless ("PDL::OpenCV::Tracking");
pp_addpm ({At=>'Top'},<<"EOPM");
use 5.10.0;
use strict;
use warnings;

use PDL::OpenCV;

EOPM

pp_addhdr << 'EOH';
        #include "generated_cvwrapper.h"
        #include "opencv_wrapper.h"
        typedef TrackerWrapper trackerObj;

EOH

pp_def('init_tracker',
        Pars=>'in(dim1,dim2,dim3); ushort [o] b(j=4);',
        OtherPars => 'TrackerWrapper *twi',
        Code=>pp_line_numbers(__LINE__,
        q{
                pdl *pid = $PDL(in);
                PDL_Indx l = $SIZE(dim1), c = $SIZE(dim2), r = $SIZE(dim3);
                if (!(pid->ndims > 2 && l<4)) r=c, c=l, l=1;
                MatWrapper *mw = newMat(c,r,pid->datatype,l,$P(in));
                if (!mw) $CROAK("newMat returned null.");
                bBox box;
                box.x=$b(j=>0);
                box.y=$b(j=>1);
                box.width=$b(j=>2);
                box.height=$b(j=>3);
                int res=initTracker($COMP(twi),mw,&box);
                $b(j=>0)=box.x;
                $b(j=>1)=box.y;
                $b(j=>2)=box.width;
                $b(j=>3)=box.height;
                deleteMat(mw);
        }
         ),
        PMCode => pp_line_numbers(__LINE__, <<'EOP'),
sub init_tracker{
        my ($class,$img, $tn, $box) = @_;
        $box=PDL->null unless UNIVERSAL::isa($box, 'PDL');
        my $tracker=newT ($tn);
        say "tn $tn box $box";
        _init_tracker_int($img,$box,$$tracker);
	bless $tracker,$class;
        ($tracker,$box);
}
EOP
        Doc=><<'EOD',
=for ref

Initialize OpenCV tracker.

=for example

        ($tracker,$box) = init_tracker ( $img, $tn, [$box, [ $mat ]] );

The first argument $img is the data, e.g. anything that fits a Mat object.
$tn is the tracker, in this order, starting with 0:

        ["BOOSTING", "MIL", "KCF", "TLD","MEDIANFLOW", "GOTURN", "MOSSE", "CSRT"};

$box is a 4-integer array (x,y,width,height) holding the bounding box.
$mat is a reference to the Mat object.
;tracker is a reference to the tracker object.
EOD
);

pp_def('update_tracker',
        Pars=>'in(dim1,dim2,dim3); ushort [o] b(j=4);',
        OtherPars => 'TrackerWrapper *twi',
        Code =>pp_line_numbers(__LINE__,
        q{
                pdl *pid = $PDL(in);
                PDL_Indx l = $SIZE(dim1), c = $SIZE(dim2), r = $SIZE(dim3);
                if (!(pid->ndims > 2 && l<4)) r=c, c=l, l=1;
                MatWrapper *mw = newMat(c,r,pid->datatype,l,$P(in));
                if (!mw) $CROAK("newMat returned null.");
                struct bBox  box;
                TrackerWrapper * tw = $COMP(twi);
                updateTracker(tw,mw,& box);
                $b(j=>0)=box.x;
                $b(j=>1)=box.y;
                $b(j=>2)=box.width;
                $b(j=>3)=box.height;
                deleteMat(mw);
        },
        ),
        PMCode => pp_line_numbers(__LINE__,
<<'EOPM',
        sub update_tracker {
                my ($tw,$mat)=@_;
		my $box=PDL->null;
                _update_tracker_int($mat,$box,$$tw);
                $box;
        }
EOPM
),
        Doc=>"update the tracker box.\n",
        );

pp_addxs('','

MODULE = PDL::OpenCV::Tracking PACKAGE = PDL::OpenCV::Tracking

trackerObj * newT (tn)
        int tn
CODE:
        trackerObj * to = newTracker(tn);
  RETVAL = to;
 OUTPUT:
  RETVAL

MODULE = PDL::OpenCV::Tracking PACKAGE = trackerObj PREFIX = track_

void
track_DESTROY(to)
  trackerObj * to
 CODE:
  deleteTracker(to);
  free (to);
',
);

pp_done();
