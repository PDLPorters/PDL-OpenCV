#!perl

use strict;
pp_bless ("PDL::OpenCV::Tracking");
pp_addpm ({At=>'Top'},<<"EOPM");
use 5.10.0;
use strict;
use warnings;

use PDL::OpenCV;

EOPM

pp_addhdr << 'EOH';
        #include "generated_cvwrapper.h"
        #include "opencv_wrapper.h"
        typedef TrackerWrapper trackerObj;

EOH

pp_def('init_tracker',
        Pars=>'[o] b(j=4);',
        OtherPars => 'TrackerWrapper *  twi; MatWrapper * mwi; ' ,#,struct MatWrapper * mw',
        Code=>pp_line_numbers(__LINE__,
        q{
                bBox box;
                box.x=$b(j=>0);
                box.y=$b(j=>1);
                box.width=$b(j=>2);
                box.height=$b(j=>3);
                int res=initTracker($COMP(twi),$COMP(mwi),&box);
                $b(j=>0)=box.x;
                $b(j=>1)=box.y;
                $b(j=>2)=box.width;
                $b(j=>3)=box.height;
        }
         ),
        PMCode => pp_line_numbers(__LINE__, <<'EOP'),
sub init_tracker{
        my ($class,$img, $tn, $box, $mat) = @_; 
        $box=zeroes(ushort,4) unless ( ref ($box) eq 'PDL');
        $mat ||= PDL::OpenCV->new_mat($img);
	say "init_tracker: mat_at(50,50): ",$mat->mat_at(50,50);
        my $tracker=newT ($tn);
        say "tn $tn box $box";
        _init_tracker_int($box,$$tracker,$$mat);
        #say "tracker pointer $$tracker, mat pointer $$mat, box $box";
	bless $tracker,$class;
	say "init_tracker: mat_at(50,50): ",$mat->mat_at(50,50);
        return ($tracker,$box,$mat);
}
EOP
        Doc=><<'EOD',

=head2 init_tracker - initialize OpenCV tracker 


Call with 
        
        ($tracker,$box) = init_tracker ( $img, $tn, [$box, [ $mat ]] );

The first argument $img is the data, e.e. anything that fits a Mat object.
$tn is the tracker, in this order, strarting with 0: 
        
        ["BOOSTING", "MIL", "KCF", "TLD","MEDIANFLOW", "GOTURN", "MOSSE", "CSRT"};

$box is a 4-integer array (x,y,width,height) holding the bounding box.
$mat is a reference to the Mat object.
;tracker is a reference to the tracker object. 
EOD
);

pp_def('update_tracker',
        Pars=>'ushort [o] b(j=4);',
        OtherPars => "TrackerWrapper * twi; MatWrapper * mwi",
        Code =>pp_line_numbers(__LINE__,
        q{
                //printf ("twi %d \n",$COMP(twi));
                struct bBox  box;
                MatWrapper * mw = $COMP(mwi);
                TrackerWrapper * tw = $COMP(twi);
                //setData(mw,$P(m),$PDL(m)->datatype);
                updateTracker(tw,mw,& box);
		//printf ("after update box %d %d \n",box.x ,box.y);
                $b(j=>0)=box.x;
                $b(j=>1)=box.y;
                $b(j=>2)=box.width;
                $b(j=>3)=box.height;
                //return;
        },
        ),
        PMCode => pp_line_numbers(__LINE__,
<<'EOPM',
        sub update_tracker {
                my ($tw,$mat)=@_;
		my $mw=PDL::OpenCV->new_mat($mat);
		#say "update tracker: at old/new: ",($mat->at(20,40),$mw->mat_at(20,40));
		my $box=PDL->null;
                _update_tracker_int($box,$$tw,$$mw);
		#say "update tracker: at old/new: ",($mat->at(20,40),$mw->mat_at(20,40));
		say $box->info,max $box;
                return ($box,$mw);
        }
EOPM
),
        Doc=>"update the tracker box.\n",
        );



pp_add_boot (<< 'EOB');

        //tw_init();
        //printf ("init done (autoinclude)\n");


EOB

pp_addxs('','

MODULE = PDL::OpenCV::Tracking PACKAGE = PDL::OpenCV::Tracking

trackerObj * newT (tn)
        int tn
CODE: 
        trackerObj * to = newTracker(tn);
  RETVAL = to;
 OUTPUT:
  RETVAL

MODULE = PDL::OpenCV::Tracking PACKAGE = trackerObj PREFIX = track_

void
track_DESTROY(to)
  trackerObj * to
 CODE:
  deleteTracker(to);
  free (to);
',
);

pp_done();

