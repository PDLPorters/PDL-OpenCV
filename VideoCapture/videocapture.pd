use strict;
pp_bless ("PDL::OpenCV::VideoCapture");
pp_addpm ({At=>'Top'},<<"EOPM");
use strict;
use warnings;
EOPM

pp_addhdr << 'EOH';
#include "opencv_wrapper.h"
typedef VideoCaptureWrapper *PDL__OpenCV__VideoCapture;
EOH

pp_addpm(<<'EOD');
=head2 new

=for ref

Initialize OpenCV videocapture object.

=head2 open

=for ref

Initialize OpenCV videocapture.

=for example

        $succeeded = $vc->open($uri);
EOD

pp_addxs(<<'EOF');
MODULE = PDL::OpenCV::VideoCapture PACKAGE = PDL::OpenCV::VideoCapture PREFIX=cw_VideoCapture_

PDL__OpenCV__VideoCapture cw_VideoCapture_new(char *klass)

void
cw_VideoCapture_DESTROY(PDL__OpenCV__VideoCapture self)

char cw_VideoCapture_open(PDL__OpenCV__VideoCapture self, char *uri)

double
cw_VideoCapture_get(PDL__OpenCV__VideoCapture self, int propId)
EOF

pp_def('read',
        Pars=>'[oca] m(l,c,r);',
        OtherPars => 'PDL__OpenCV__VideoCapture wr',
        NoPthread=>1, # I/O
        Comp => 'MatWrapper *mw;',
        MakeComp => <<'EOF',
                if (!($COMP(mw) = cw_Mat_new(NULL)))
                  $CROAK("cw_Mat_new returned null.");
                if (!cw_VideoCapture_read($COMP(wr), $COMP(mw)))
                  $CROAK("failed to read");
EOF
        CompFreeCodeComp => 'if ($COMP(mw)) cw_Mat_DESTROY($COMP(mw));',
        RedoDimsCode=>pp_line_numbers(__LINE__, <<'EOF'),
                cw_Mat_pdlDims($COMP(mw), &$PDL(m)->datatype, &$SIZE(l), &$SIZE(c), &$SIZE(r));
EOF
        Code =>pp_line_numbers(__LINE__, <<'EOF'),
                memmove($P(m), cw_Mat_ptr($COMP(mw)), $PDL(m)->nbytes);
EOF
        PMCode => pp_line_numbers(__LINE__, <<'EOPM'),
        sub read {
                eval { _read_int(my $o = PDL->null, $_[0]); $o; };
        }
EOPM
        Doc=>"Read a frame from the source, or return undef on failure.",
);

pp_done();
