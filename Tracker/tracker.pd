#!perl

use strict;
pp_bless ("PDL::OpenCV::Tracker");
pp_addpm ({At=>'Top'},<<"EOPM");
use 5.10.0;
use strict;
use warnings;

use PDL::OpenCV;

EOPM

pp_addhdr << 'EOH';
#include "opencv_wrapper.h"
typedef TrackerWrapper *PDL__OpenCV__Tracker;
EOH

pp_def('init_tracker',
        Pars=>'in(l,c,r); ushort [o] b(j=4);',
        OtherPars => 'PDL__OpenCV__Tracker twi',
        Code=>pp_line_numbers(__LINE__,
        q{
                MatWrapper *mw = newMatWithDims($SIZE(c),$SIZE(r),$PDL(in)->datatype,$SIZE(l),$P(in));
                if (!mw) $CROAK("newMatWithDims returned null.");
                cw_Rect box;
                box.x=$b(j=>0);
                box.y=$b(j=>1);
                box.width=$b(j=>2);
                box.height=$b(j=>3);
                initTracker($COMP(twi),mw,box);
                $b(j=>0)=box.x;
                $b(j=>1)=box.y;
                $b(j=>2)=box.width;
                $b(j=>3)=box.height;
                deleteMat(mw);
        }
         ),
        PMCode => pp_line_numbers(__LINE__, <<'EOP'),
sub init_tracker{
        my ($class,$img,$box) = @_;
        $box=PDL->null unless UNIVERSAL::isa($box, 'PDL');
        my $tracker=newT();
        say "box $box tracker=$tracker";
        _init_tracker_int($img,$box,$tracker);
	bless $tracker,$class;
        ($tracker,$box);
}
EOP
        Doc=><<'EOD',
=for ref

Initialize OpenCV tracker.

=for example

        ($tracker,$box) = init_tracker ( $img, [$box] );

The first argument $img is the data, e.g. anything that fits a Mat object.
Currently only the KCF tracker is supported.

$box is a 4-integer array (x,y,width,height) holding the bounding box.
;tracker is a reference to the tracker object.
EOD
);

pp_def('update_tracker',
        Pars=>'in(l,c,r); ushort [o] b(j=4);',
        OtherPars => 'PDL__OpenCV__Tracker twi',
        Code =>pp_line_numbers(__LINE__, q{
                MatWrapper *mw = newMatWithDims($SIZE(c),$SIZE(r),$PDL(in)->datatype,$SIZE(l),$P(in));
                if (!mw) $CROAK("newMatWithDims returned null.");
                cw_Rect box;
                TrackerWrapper * tw = $COMP(twi);
                updateTracker(tw,mw,&box);
                $b(j=>0)=box.x;
                $b(j=>1)=box.y;
                $b(j=>2)=box.width;
                $b(j=>3)=box.height;
                deleteMat(mw);
        }),
        PMCode => pp_line_numbers(__LINE__,
<<'EOPM',
        sub update_tracker {
                my ($tw,$mat)=@_;
                _update_tracker_int($mat,my $box=PDL->null,$tw);
                $box;
        }
EOPM
),
        Doc=>"update the tracker box.\n",
        );

pp_addxs('','
PDL__OpenCV__Tracker newT()
CODE:
  RETVAL = newTracker();
 OUTPUT:
  RETVAL

void
DESTROY(to)
  PDL__OpenCV__Tracker to
 CODE:
  deleteTracker(to);
',
);

pp_done();
