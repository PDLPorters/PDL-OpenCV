use strict;
use warnings;
use File::Spec::Functions;
require ''.catfile(updir, 'genpp.pl');

genheader("Tracker");

pp_def('init',
        Pars=>'in(l,c,r); indx [o] b(j=4);',
        OtherPars => 'PDL__OpenCV__Tracker twi',
        Code=>pp_line_numbers(__LINE__, q{
                MatWrapper *mw = cw_Mat_newWithDims($SIZE(l),$SIZE(c),$SIZE(r),$PDL(in)->datatype,$P(in));
                RectWrapper *box = cw_Rect_newWithDims($b(j=>0),$b(j=>1),$b(j=>2),$b(j=>3));
                if (!mw || !box) {
                  cw_Mat_DESTROY(mw);
                  cw_Rect_DESTROY(box);
                  $CROAK("A constructor returned null.");
                }
                initTracker($COMP(twi),mw,box);
                cw_Rect_getDims(box,&$b(j=>0),&$b(j=>1),&$b(j=>2),&$b(j=>3));
                cw_Mat_DESTROY(mw);
                cw_Rect_DESTROY(box);
        }),
        PMCode => pp_line_numbers(__LINE__, <<'EOP'),
sub init{
        my ($tracker,$img,$box) = @_;
        _init_int($img,$box,$tracker);
        $box;
}
EOP
        Doc=><<'EOD',
=for ref

Initialize OpenCV tracker.

=for example

        $box = $tracker->init($img, $box);

The first argument $img is the data, e.g. anything that fits a Mat object.
Currently only the KCF tracker is supported.

$box is a 4-integer array (x,y,width,height) holding the bounding box.
;tracker is a reference to the tracker object.
EOD
);

pp_def('update',
        Pars=>'in(l,c,r); indx [o] b(j=4);',
        OtherPars => 'PDL__OpenCV__Tracker twi',
        Code =>pp_line_numbers(__LINE__, q{
                MatWrapper *mw = cw_Mat_newWithDims($SIZE(l),$SIZE(c),$SIZE(r),$PDL(in)->datatype,$P(in));
                RectWrapper *box = cw_Rect_new(NULL);
                if (!mw || !box) {
                  cw_Mat_DESTROY(mw);
                  cw_Rect_DESTROY(box);
                  $CROAK("A constructor returned null.");
                }
                updateTracker($COMP(twi),mw,box);
                cw_Rect_getDims(box,&$b(j=>0),&$b(j=>1),&$b(j=>2),&$b(j=>3));
                cw_Mat_DESTROY(mw);
                cw_Rect_DESTROY(box);
        }),
        PMCode => pp_line_numbers(__LINE__,
<<'EOPM',
        sub update {
                my ($tw,$mat)=@_;
                _update_int($mat,my $box=PDL->null,$tw);
                $box;
        }
EOPM
),
        Doc=>"update the tracker box.\n",
        );

pp_done();
