PDL::OpenCV

This is an attempt to interface OpenCV from perl and PDL. The central piece is the 
CV Mat object which is wrapped in a C struct and a perl object. This C abstraction layer
is necessary because of conflicts between perl and OpenCV headers. Use 
	
	$mw=PDL::OpenCV->new_mat($piddle);

To initialise a cv::Mat object stored in $mw. For a bare object, use 

	$empty=PDL::OpenCV->newMW(); 

This may be sometimes required as container to receive the result of a function.
All interactions with OpenCV are via objects.

Currently this is compiled for OpenCV 4.5. At least between majer versions, the
API is changing. Some support for v3.2 is likely to come in the future. See the INSTALL 
file for instructions!

OpenCV has a multitude of functions and classes. Full coverage of OpenCV
features is beyond my knowledge and resources. If you want to extend PDL::OpenCV, feel free
to do so. Object constructors require direct XS, see e.g. newMW() for a relatively simple example.
Don't forget the () when calling, apparently this is required. It gives you a perl scalar reference,
which you can bless into your object. See also the Tracker class. 

I've used PDL::PP for all functions requiring C interfaces, even those that do not involve piddles, e.g. 
convertTo(). This changes the Mat data type and returns a new object. The Pars directive is an empty string
in this case.  

Many functions are fairly simple to wrap, e.g. rows, cols, so code can be
generated by PP using ufunc (copied and simplified from ops.pd). Also, wrapper code can be generated,
see cw/Makefile.PL for how this is done. I would suggest that you put extensions into their own modules
within the PDL::OpenCV namespace reflecting the OpenCV class/namespace. Please share your extensions!


