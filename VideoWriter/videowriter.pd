use strict;
pp_bless ("PDL::OpenCV::VideoWriter");
pp_addpm ({At=>'Top'},<<"EOPM");
use strict;
use warnings;
EOPM

pp_addhdr << 'EOH';
#include "opencv_wrapper.h"
typedef VideoWriterWrapper *PDL__OpenCV__VideoWriter;
EOH

pp_addpm(<<'EOD');
=head2 new

=for ref

Initialize OpenCV video writing object.

=for example

  $writer = PDL::OpenCV::VideoWriter->new;

=head2 open

=for ref

Open writing to given filename. Throws exception if failed.

=for example

  $writer->open($name, $fourcc_code, $fps, $x, $y, $iscolor);
EOD

pp_addxs(<<'EOF');
PDL__OpenCV__VideoWriter new(klass)
        char *klass
CODE:
  RETVAL = newVideoWriter();
 OUTPUT:
  RETVAL

PDL__OpenCV__VideoWriter open(self, name, code, fps, width, height, iscolor)
        PDL__OpenCV__VideoWriter self
        char *name
        char *code
        double fps
        int width
        int height
        char iscolor
CODE:
  SizeWrapper *sw = newSizeWithDims(width, height);
  const char *ret = openVideoWriter(self, name, cw_VideoWriter_fourcc(code[0],code[1],code[2],code[3]), fps, sw, iscolor);
  deleteSize(sw);
  if (ret) {
    PDL->pdl_barf("Error opening file '%s': %s", name, ret);
  }
 OUTPUT:
  RETVAL

void
DESTROY(self)
  PDL__OpenCV__VideoWriter self
 CODE:
  deleteVideoWriter(self);
EOF

pp_def('write',
        Pars=>'m(l,c,r);',
        OtherPars => 'PDL__OpenCV__VideoWriter wr',
        NoPthread=>1, # I/O
        Code =>pp_line_numbers(__LINE__, <<'EOF'),
                pdl *pid = $PDL(m);
                MatWrapper *mw = newMatWithDims($SIZE(c),$SIZE(r),pid->datatype,$SIZE(l),$P(m));
                if (!mw) $CROAK("newMatWithDims returned null.");
                writeVideoWriter($COMP(wr), mw);
                deleteMat(mw);
EOF
        PMCode => 'sub write { _write_int(@_[1,0]) }',
        Doc=>"Write a frame to the file.",
);

pp_done();
