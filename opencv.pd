use strict;
pp_addpm ({At=>'Top'},<<'EOPM');
use 5.10.0;
use strict;
use warnings;

=head1 NAME

PDL::OpenCV - This module interfaces perl/PDL and OpenCV.

=head1 SYNOPSIS

	use PDL::OpenCV;
	use PDL;
	use PDL::NiceSlice;

	... 

	$mo=new_mat($data);
	$mw->imshow();
	...
	$result=$mw->get_data;

=head1 Description

Use PDL::OpenCV to call OpenCV functions on your data using perl/PDL. This module
is the glue between the two tools. OpenCV nad perl's C++ interface are not 
compatible, a C layer is introduced and needs to be built separately, see INSTALLATION.

=head1 Functions

=cut

use Data::Dumper;

sub PDL::OpenCV::get_dp {
	my ($self,$p) = @_;
	barf ("get_dp: not a piddle! ") unless (ref($p) =~ /PDL/ );
	getD($$self,$p);
	say "data ref ",$p->get_dataref;
	$p->upd_data;
	$p;
}

sub to_planes {
	my $m = shift;
	my ($c,$r,$l);
	my @d=$m->dims;
	$c=shift @d;
	$r=shift @d;
	$l=1;
	if ($m->ndims>2 && $c < 4) {
		$l=$c;
		$c=$r;
		$r=shift @d;
	}
	#$m->reshape($l,$c,$r,@d);
	$l,$c,$r,@d;
}

EOPM

pp_addpm ({At=>'Bot'},<<'EOPM');
=head1 Known issues

The number of functions in OpenCV is large, if you do not encounter what is needed,
there are fairly easy ways to create the wrappers. Look at ufunc/ofunc im OpenCV/opencv.pd
and gen_code in cw/MakeFile.PL. Please file a report if you do so.

There is a make_phsyical call before pointing the data to OpenCV. Both OpenCV
and PDL use data flow, I have not investigated this, behaviour is not defined
yet. 

The broadcasting behaviour is also not yet defined. Some things may work,
some not.

=cut
EOPM

our $VERSION = 0.02;
pp_setversion($VERSION);

pp_bless("PDL::OpenCV");

pp_addhdr << 'EOH';
#include "opencv_wrapper.h"
#include "generated_cvwrapper.h"
	typedef MatWrapper matObj;
EOH
pp_addxs('','
MODULE = PDL::OpenCV PACKAGE = PDL::OpenCV

void * dataPtr (mo)
	matObj * mo
CODE:
	void * data_ptr = getData(mo);
	RETVAL = data_ptr;
OUTPUT: 
RETVAL

matObj *
newMW ()
 CODE:
matObj * mo= NULL;
mo=emptyMW();
if (mo==NULL) {
	barf("emptyMat returned null.\n");
}
  RETVAL = mo;
 OUTPUT:
  RETVAL


matObj *
nMat (pid)
pdl * pid
CODE:
int t;
PDL_Indx c;
PDL_Indx r;
int l;
matObj * mo = NULL;
l = pid->dims[0];
c = pid->dims[1];
r = pid->dims[2];
void * ptr =  pid->data ;
t=pid->datatype;
if (pid->ndims > 2 && l<4)  {
	mo=newMat(c,r,t,l,ptr);
} else {
	r=c;
	c=l;
	l=1;
	mo=newMat(c,r,t,l,ptr);
}
printf("cols %"IND_FLAG" rows %"IND_FLAG" type %d planes l %d ptr %p \n",c,r,t,l,ptr);
if (mo==NULL) {
	barf("newMat returned null.\n");
}
RETVAL = mo;
OUTPUT:
RETVAL

void  
getD(mo, pid)
matObj *  mo
pdl * pid
CODE:
void * ptr =  mo;
matObj * mw =  ptr;
printf("getD mo. %p mw. %p data %p\n",mo,mw,getData(mw));
ptr =getData(mo);
float * fp = ptr;
pid->data=ptr;
printf("data (pid) 0,0 %f\n", fp[0]);

MODULE = PDL::OpenCV 		PACKAGE = matObjPtr PREFIX = mat_

void
mat_DESTROY(mw)
  matObj * mw
 CODE:
  deleteMat(mw);
  free (mw);

');

pp_def('vector_size',
	Pars=>'indx [o] vs();',
	OtherPars=>'MatWrapper * mw;PDL_Indx s',
	PMCode=>pp_line_numbers(__LINE__,'
		sub vector_size {
			my ($mw,$size) = @_;
			$size = -1 unless $size>=0;
			my $p=PDL->null;
			_vector_size_int($p,$$mw,$size);
			$p;
		}
	'),
	Code=>pp_line_numbers(__LINE__,'
		$vs()=vectorSize($COMP(mw),$COMP(s));
	'),
	Doc=>'

=head2 vector_size

OpenCV uses std::vector<Mat> to store e.g. videos. The MatWrapper struct suports this. Using this method, 
the size of the vector is manipulated and queried. This is useful in e.g. video I/O or per frames processing.

=cut	

	',
);

pp_def('create_video',
	Pars=>'m(l,c,r,f)',
	OtherPars=>'char *file; double fps; char *code',
	NoPthread=>1,
	GenericTypes=>[qw/A B S U L F D/ ],
	Code=>pp_line_numbers(__LINE__,'
	    if (!$COMP(file) || !strlen($COMP(file))) $CROAK("No file name given!");
	    broadcastloop %{
		MatWrapper *mw=emptyMW();
		int bs=PDL->howbig($PDL(m)->datatype);
		PDL_Indx sz = $SIZE(l)*$SIZE(c)*$SIZE(r)*bs;
		printf ("code %s\n",$COMP(code));
		printf ("frames %"IND_FLAG" ",$SIZE(f));
		printf ("cols %"IND_FLAG" ",$SIZE(c));
		printf ("rows %"IND_FLAG" ",$SIZE(r));
		printf ("planes %"IND_FLAG" ",$SIZE(l));
		printf ("datatype %d\n",bs);
		printf ("size %"IND_FLAG"\n",sz);
		int res = newVector(mw,$SIZE(f),$SIZE(c), $SIZE(r), bs, $SIZE(l), $P(m), sz);
		printf("code %s\n",$COMP(code));
		res = vWrite(mw,$COMP(file),$COMP(code),$COMP(fps));
		deleteMat(mw);
	    %}
	'),
	Doc=>'
=for ref

Stores a (colour,x,y,frame) ndarray in a file.

	$mo=create_video($piddle,file,fps,[code]);

For possible encodings see https://www.fourcc.org/codecs/. If not supplied, OpenCV will try to derive it from the file name.

From the OpenCV documentation: 

=over

=item    With some backends fourcc=-1 pops up the codec selection dialog from the system.

=item    To save image sequence use a proper filename (eg. img_%02d.jpg) and fourcc=0 OR fps=0. Use uncompressed image format (eg. img_%02d.BMP) to save raw frames.

=item    Most codecs are lossy. If you want lossless video file you need to use a lossless codecs (eg. FFMPEG FFV1, Huffman HFYU, Lagarith LAGS, etc...)

=item    If FFMPEG is enabled, using codec=0; fps=0; you can create an uncompressed (raw) video file.

=back

=cut
',
);

pp_def('video_dims',
	Pars=>'[o] dims(n=5);',
	OtherPars=>'char * file',
	GenericTypes=>[qw/N/],
	NoPthread=>1,
	Code=>pp_line_numbers(__LINE__,'
		PDL_Indx t,l,c,r,f;
		const char *ret = vDims($COMP(file), &t, &l, &c, &r, &f);
		if (ret) $CROAK("Error in vDims: %s", ret);
		$dims(n=>0)=t;
		$dims(n=>1)=l;
		$dims(n=>2)=r;
		$dims(n=>3)=c;
		$dims(n=>4)=f;
	'),
);

pp_def('vread',
	Pars=>'[o] m(l,c,r,f);',
	OtherPars=>'MatWrapper * mw; char *file; int mattype',
	GenericTypes=>[qw/A B S U L F D/ ],
	NoPthread=>1,
	PMCode=>pp_line_numbers(__LINE__,'
		sub vread {
			my ($mo,$name,$p)=@_;
			if (ref $mo ne q/PDL::OpenCV/) {
				$name=$mo if defined $mo;
				$mo=PDL::OpenCV::newMW();
				bless($mo,"PDL::OpenCV");
			}
			$p=PDL->null unless UNIVERSAL::isa($p, "PDL");
			barf "cannot read file $name!" unless -f $name;
			_vread_int($p,$$mo,$name,video_dims($name)->slice("0")->sclr);
			$p;
		}
		'
		),
	RedoDimsCode=>pp_line_numbers(__LINE__,'
		PDL_Indx f=vRead($COMP(mw),$COMP(file));
		PDL_Indx ch = cw_channels($COMP(mw));
		$SIZE(l)=ch;
		$SIZE(c)=cols($COMP(mw),-1);
		$SIZE(r)=rows($COMP(mw),-1);
		$SIZE(f)=f;
		printf ("number of frames %"IND_FLAG"\n",$SIZE(f));
		printf ("data dim 0 %"IND_FLAG"\n",$PDL(m)->dims[0]);
		printf ("data dim 3 %"IND_FLAG"\n",$PDL(m)->dims[3]);
		printf ("data pointer %p\n",$P(m));
		printf ("vread: ch %"IND_FLAG" j; %"IND_FLAG"  k %"IND_FLAG" /  l %"IND_FLAG"\n ",ch,$SIZE(l),$SIZE(c),$SIZE(r));
		if ($PDL(m)->state & PDL_MYDIMS_TRANS)
		  $PDL(m)->datatype = get_pdltype($COMP(mattype));
		'),
	Code=>pp_line_numbers(__LINE__,'
		printf ("number of frames %"IND_FLAG"\n",$SIZE(f));
		printf ("data pointer %p\n",$P(m));
		$PDL(m)->datatype=getDataCopy($COMP(mw),$P(m),$SIZE(f));
		if ($SIZE(f)<=0) {barf ("Failed to read video. %s.\n",$COMP(file));}
	'),
);

pp_addpm(<<'EOF');
sub new_mat {
	my ($class,$m)=@_;
	my @d=to_planes($m);
	$m->make_physical;
	my $mw = nMat($m);
	bless $mw,$class;
}

=head2 new_mat - the constructor of a Mat() object.

From a piddle, a Mat is created. Note, that OpenCV is rows first. Colour planes
are derived from the first dimension, I think OpenCV defaults to BGR(A), please
checkout the OpenCV documentation. This is the basic constructor of the perl
OpenCV Mat object. Use this whenever you need to send data to OpenCV.


Only a subset of types is supported by OpenCV, see the docuemnation.

for stacks of images, use create_video.

=cut
EOF

pp_def ('get_data',
	Pars=>'[o] m(j,k,l);',
	OtherPars=>'MatWrapper * mw;',
	RedoDimsCode=>pp_line_numbers(__LINE__,
	'
		PDL_Indx js = $SIZE(j);
		PDL_Indx ks = $SIZE(k);
		PDL_Indx ls = $SIZE(l);
		PDL_Indx ch = cw_channels($COMP(mw));
		PDL_Indx x = cols($COMP(mw),-1);
		PDL_Indx y = rows($COMP(mw),-1);
		//if (js > 3 && ks == y && js == x) { 
			//$PDL(m)->ndims++;
			$SIZE(j)=ch;
			$SIZE(k)=x;
			$SIZE(l)=y;
		//}
		printf("ch %"IND_FLAG" j; %"IND_FLAG" x %"IND_FLAG" : k %"IND_FLAG" / y %"IND_FLAG" : l %"IND_FLAG"\n ",ch,$SIZE(j),x,$SIZE(k),y,$SIZE(l));
	'),
	Code=>pp_line_numbers(__LINE__,
	'
			//double * ptr =$P(m);
			printf ("get_data: piddle type %d\n",$PDL(m)->datatype);
			printf ("data pointer %p\n",$P(m));
			int t=getDataCopy($COMP(mw),$P(m),1); 
			printf ("get_data: type %d\n",t);
			$PDL(m)->datatype=t;
			printf ("get_data: piddle type %d\n",$PDL(m)->datatype);
		printf ("get_data: data pointer %p\n",$P(m));
		PDL_Indx js = $SIZE(j);
			//$P(m)= ($PDL *) ptr;
	'),
	PMCode=>pp_line_numbers(__LINE__,
	'
		sub get_data {
			my ($mw,$p,) = @_;
			my @d;
			unless (ref ($p) =~ "PDL") {
				#say "rows ",$mw->rows;
				#$p=zeroes(sclr $mw->cw_channels ,sclr ($mw->cols),sclr ($mw->rows));
				$p=PDL->null;
			} else {
				#$p=$p->transpose;
				@d = to_planes($p);
				$p->reshape(@d);
			}
			$p->make_physical;
			#$p->upd_data;
			say "ref to data" ,$p->get_dataref;
			_get_data_int($p,$$mw);
			#say "data type ", $p->type;
			#say "(get_data) 4,4: ",$p->slice("4","4");
			#say "ref to data after " ,$p->get_dataref;
			#say "(get_data) 48,48: after",$p->slice("48","48");
			$p; #->transpose;
		}
		',),
	Doc=><<'EOD',

=head2 get_data - gets data from a Mat object into a piddle. If you use an exisitng piddle, size and type should match.
The first dimension are color planes. Be aware that OpenCV is rows first wheres PDL is columns first.

	my $image=$mw->get_data;

=cut
EOD

	);


pp_def ('set_data',
	Pars=>'m(k,l);',
	OtherPars=>'MatWrapper * mw',
	GenericTypes=>[qw/A B S U L F D/ ],
	Code=>pp_line_numbers(__LINE__,
	'
			//printf("m(3,1) %f \n",$m(k=>0,l=>0));
			setData($COMP(mw),$P(m),$PDL(m)->datatype);
	'),
	PMCode=>pp_line_numbers(__LINE__,
	'
		sub set_data {
			my ($mw,$data) = @_;
			warn "This sets the Mat data pointer to the piddles. Apparently, this is unstable. Better use new_mat!\n";
			barf "no data supplied.\n" unless defined $data;
			barf "data has wrong dimensions.\n" unless ($data->dim(1) == $mw->rows &&  $mw->cols==$data->dim(0));
			$data->make_physical;
			_set_data_int(pdl($data),$$mw);
		}
	'),
	Doc=><<"EOD",

=head2 set_data - update data of a Mat object. 

WARNING: This ia a pointer update and is apparently not working properly, data is overwritten. Use new_mat instead!

=cut

EOD

	);

pp_add_boot (<< 'EOB');
	cv_init();
	//printf ("init done (autoinclude)\n");
EOB

pp_addpm(<<'EOPM');
sub data_ptr {
	my $mw=shift;
	dataPtr($$mw);
}

=head2 data_ptr - Returns the Mat.data pointer.

=cut

EOPM

pp_def ('mat_at',
	Pars=>'double [o] m(j);',
	OtherPars=>'MatWrapper * mwi;int x;int y;',
	Code=>pp_line_numbers(__LINE__,
	'
		//printf ("Hello Mat!\n");
		//cwtype ( $COMP(mwi), pdltype);
		$PDL(m)->datatype= MatAt($COMP(mwi),$COMP(x),$COMP(y),$P(m));
		

		//printf ("mat_at: pointer %p\n",$P(m));
		//printf ("mat_at: data type %d\n",$PDL(m)->datatype);
		//printf ("mat_at: %f\n",$P(m)[0]);
		//$P(m)=vec;
		/*
		loop(j) %{ 
			$m()=frame.data[cw_channels($COMP(mwi))*(cols($COMP(mwi)*$COMP(y) + $COMP(x)) + j];
		%}
		*/
	',),
	PMCode=>pp_line_numbers(__LINE__,
	q{
	sub mat_at {
		my ($mw,$x,$y)=@_;
		my ($t,$ct) = $mw->mat_type;
		my $o=zeroes(sclr $mw->cw_channels);
		#say "pointer $$mw";
		_mat_at_int($o,$$mw,$x,$y);
		#say "mat_at value $o";
		$o;
	}
	},
	Doc=>'

=head2 mat_at - Pixel value(s) at x,y.

This returns the color vector at a given pixel (x,y).

=cut
	',
	),
);

pp_def('convert_to',
	Pars=>'',
	OtherPars=>'MatWrapper * mi; MatWrapper * mo; int type',
	PMCode=>pp_line_numbers(__LINE__,
<<'EOPM'),
		sub convert_to {
		my ($mi,$mo,$t) = @_;
		if (ref $mo ne q/PDL::OpenCV/) {
			$t=$mo if defined $mo;
			$mo=PDL::OpenCV::newMW();
			bless($mo,'PDL::OpenCV');
		}
		$t=$t->numval if eval { $t->isa('PDL::Type'); };
		barf "Not a valid data type $t\n" unless defined $t;
		_convert_to_int($$mi,$$mo,$t);
		$mo;
	}
EOPM
	GenericTypes=>[qw/A B S U L F D/ ],
	Code=>pp_line_numbers(__LINE__,
		'cw_convertTo($COMP(mi),$COMP(mo),$COMP(type)); '),
	Doc=>'

=head2 Interface to the covnertTo method

Changes the OpenCV data type and returns a new Mat object. It takes a PDL type
(name or number) and sets the respective OpenCV data type. Planes are not
effected. Not all PDL types are supported. See the OpenCV documentation. Essentially,
real data types up to 32 bit long and 64 bit double, respectively.



=cut
	',
	);

pp_def('mat_type',
	Pars=>'[io] cvt(); [io] pt();',
	OtherPars=>'MatWrapper * mi; ',
	Code=>pp_line_numbers(__LINE__, q{
		//int * pt = & $COMP(pdltyp);
		int t,ct;
		t = $pt();
		ct = $cvt();
		//printf ("cvt %d pd %d \n",ct,t);
		ct = cwtype($COMP(mi),& t);
		//printf ("cvt %d pd %d \n",$cvt(),$pt());
		$pt()=t;
		$cvt()=ct;
	} ),
	PMCode=>pp_line_numbers(__LINE__, q{
		sub mat_type {
			my ($mw,$t) =@_;
			my $ct=pdl([-1]);
			$t=pdl([-1]) unless defined $t;
			#say $t->info,$ct->info;
			#say "t $t ct $ct";
			_mat_type_int($t,$ct,$$mw,);
			$t=sclr $t;
			$ct=sclr $ct;
			#say "type $t cvtype $ct";
			($t,$ct);
		}
	}
	),
	Doc=>'
=for ref

Returns the pdl data type number, as in $p->get_datatype, and the OpenCV data type of the Mat object.

	($pdltype,$cvtype)=$mw->mat_type();
',
	);

sub protect_chars {
	my ($txt) = @_;
	$txt =~ s/>/E;gt#/g;
	$txt =~ s/</E;lt#/g;
	$txt =~ s/;/</g;
	$txt =~ s/#/>/g;
	return $txt;
}





sub ofunc {
    my ($name,$func,$overload,$doc,%extra) = @_;
    my $funcov = ref $func eq 'ARRAY' ? $func->[1] : $func;
    my $funcovp = protect_chars $funcov;
    $func = $func->[0] if ref $func eq 'ARRAY';
    my $got_complex = PDL::Core::Dev::got_complex_version($func, 0);
    # handle exceptions
    my $badcode; # = '$ISBAD(a())';
    if ( exists $extra{Exception} ) {
#	$badcode .= " || $extra{Exception}";
#	print "Warning: ignored exception for $name\n";
	# NOTE This option is unused ($badcode is commented out above).
	#      See also `biop()`.
	delete $extra{Exception};
    }
    my $codestr = '
		//printf ("ofunc: mw %p\n",$COMP(mw)); 
		int res;
		res = '.$func.'($COMP(mw));
		//printf ("res %d\n",res);
		$b() = res;' ;
    pp_def($name,
	   Pars => '[o]b()',
	   OtherPars=>'MatWrapper * mw; ',
	   GenericTypes=>['N','D'],
	   PMCode => pp_line_numbers(__LINE__, qq{
		   sub $name {
			   my (\$self) = \@\_;
			   my \$res=zeroes(ushort,1);
			   _$name\_int(\$res,\$\$self,);
			   say "res \$res?";
			   \$res;
		   }
	   },),
	   Code => pp_line_numbers(__LINE__, qq{
	           $codestr
	   }),
	   %extra,
	   Doc => << "EOD");
=for ref

$doc

=for example

   \$y = $funcov () ;
   \$x->inplace->$name;  # modify \$x inplace

It can be made to work inplace with the C<\$x-E<gt>inplace> syntax.
This function is used to overload the unary C<$funcovp> operator/function.

=cut

EOD
} # sub: ofunc()


pp_def('cv_minmax',
	Pars=>'double [o] m(k);',
	RedoDimsCode=>'
		//$SIZE(c)=chs; 
		$SIZE(k)=4; 
	',
	OtherPars=>'MatWrapper * mw',
	Code=>pp_line_numbers(__LINE__,'
		int chs=cw_channels($COMP(mw));
		//printf("chs %d \n",chs);
		if (chs>1) {barf ( "minMaxIdx only works on single channel (%d) arrays. \n",chs);}
		double mymin;
		double mymax;
		//int * mil,mal;
		//printf("min %f max %f\n",mymin,mymax); 
		cw_minMaxIdx($COMP(mw),& mymin,& mymax); //,mil,mal);
		//printf("min %f max %f\n",mymin,mymax); 
		$m(k=>0)=mymin;
		$m(k=>1)=mymax;
		//$m(k=>2)=mil;
		//$m(k=>3)=mal;
	'),
	PMCode=>pp_line_numbers(__LINE__,'
		sub cv_minmax {
			my ($mw) =@_;
			my $p=PDL->null;
			_cv_minmax_int($p,$$mw);
			#say "p: minmax: ",$p;
			$p;
		}
	')
	);	

sub ufunc {
    my ($name,$func,$overload,$doc,%extra) = @_;
    my $funcov = ref $func eq 'ARRAY' ? $func->[1] : $func;
    my $funcovp = protect_chars $funcov;
    $func = $func->[0] if ref $func eq 'ARRAY';
    my $got_complex = PDL::Core::Dev::got_complex_version($func, 1);
    # handle exceptions
    my $badcode; # = '$ISBAD(a())';
    if ( exists $extra{Exception} ) {
#	$badcode .= " || $extra{Exception}";
#	print "Warning: ignored exception for $name\n";
	# NOTE This option is unused ($badcode is commented out above).
	#      See also `biop()`.
	delete $extra{Exception};
    }
    my $codestr = '
		//printf ("ufunc: mw %p\n",$COMP(mw)); 
		int res;
		res = '.$func.'($COMP(mw),$COMP(v));
		//printf ("res %d\n",res);
		$b() = res;' ;
    pp_def($name,
	   Pars => '[o]b()',
	   OtherPars=>'MatWrapper * mw; PDL_Indx v',
	   GenericTypes=>['N'],
	   PMCode => pp_line_numbers(__LINE__, qq{
		   sub $name {
			   my (\$self,\$v) = \@\_;
			   \$v = -1 unless defined \$v;
			   my \$res=zeroes(ushort,1);
			   #say "$name calling now (\$v)";
			   _$name\_int(\$res,\$\$self,\$v);
			   #say "res \$res?";
			   \$res;
		   }
	   },),
	   Code => pp_line_numbers(__LINE__, qq{
	           $codestr
	   }),
	   %extra,
	   Doc => << "EOD");
=for ref

$doc

=for example

   \$y = $funcov \$x;
   \$x->inplace->$name;  # modify \$x inplace

It can be made to work inplace with the C<\$x-E<gt>inplace> syntax.
This function is used to overload the unary C<$funcovp> operator/function.

=cut

EOD
} # sub: ufunc()

# generate functions.
map {ufunc($_,$_,0,"returns and optionally sets $_ of the Mat object. \n");} (qw/rows cols / );
map {ofunc($_,$_,0,"returns $_ of the Mat object. \n");} (qw/cw_channels/ );

pp_done();
