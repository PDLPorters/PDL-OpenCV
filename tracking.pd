

pp_addpm ({At=>'Top'},<<"EOPM");

use 5.10.0;

EOPM

# pp_setversion('0.01');

pp_bless ("PDL::Tracking");

pp_addhdr << 'EOH';
 	#include "tracker_wrapper.h"
	//TrackerWrapper * tw;
	//MatWrapper * mw;

EOH
pp_def ('mat_at',
	Pars=>'[o] m();',
	OtherPars=>'MatWrapper * mw,int x,int y',
	Code=>pp_line_numbers(__LINE__,
	'
		$o()=MatAt($COMP($mw),$COMP(x),$COMP(y));
	'),
	PMCode=>pp_line_numbers(__LINE__,
	'
	sub mat_at {
		my ($mw,$x,$y)=@_;
		my $o=PDL->null;
		_mat_at_int($o,$$mw,$x,$y);
		$o;
	}
	'),
);


pp_def ('set_image',
	Pars=>'m(k,l);',
	OtherPars=>'MatWrapper * mw',
	Code=>pp_line_numbers(__LINE__,
	'
		PDL_Indx ks = $SIZE(k);
		PDL_Indx ls = $SIZE(l);
		int * x;
		int * y;
		MatSize($COMP(mw),x,y);
		if (((*x) == ks) && ((*y) == ls)) 
			setData($COMP(mw),$P(m),0);
		else
			$CROAK("Matrix size does not match!\n");

	'),
	Doc=><<"EOD",

=head2 set_image - update data of a Mat object. Size and type should match.

EOD

	);

pp_def('init_tracker',
	Pars=>'float m(k,l); ushort b(j);',
	# RedoDimsCode=>'$SIZE(l)=3*$SIZE(k); ',
	# GenericTypes => ['F'],
	# OtherPars=>'size_t tracker',
	OtherPars => 'int tracker; TrackerWrapper *  twi; MatWrapper * mwi; ' ,#,struct MatWrapper * mw',
	Code=>pp_line_numbers(__LINE__,
	q{
		float myf=$m(k=>48,l=>48);
		printf("48 48%f\\n",myf);
		printf("tracker%d;\\n",$COMP(tracker));
		PDL_Indx ks = $SIZE(k);
		PDL_Indx ls = $SIZE(l);
		bBox box;
		box.x=$b(j=>0);
		box.y=$b(j=>1);
		box.width=$b(j=>2);
		box.height=$b(j=>3);
		printf("ROI x %d y %d width %d height %d",box.x,box.y,box.width,box.height);
		//printf("ROI x %d y %d width %d height %d",box->x,box->y,box->width,box->height);

		printf("Hello World\n");
		TrackerWrapper *tw = newTracker($COMP(tracker));
		printf("Hello World\n");
		MatWrapper *mw = newMat(ks,ls,cvT.f32c1,$P(m));
		int res=init_tracker(tw,mw,&box);
		printf("ROI x %d y %d width %d height %d\n",box.x,box.y,box.width,box.height);
		printf ("data from mat %f\n",MatAt(mw,48,48));
		$COMP(twi) = tw;
		$COMP(mwi)=mw;
   		printf ("twi %d \n",tw);
	}
	 ),
        PMCode => pp_line_numbers(__LINE__,
<<'EOP',
sub init_tracker{
	my ($img, $tn, $box, $mat) = @_; 
	zeroes(ushort,4) unless ( ref ($box) eq 'PDL');
	my $tracker;
	say "tn $tn box $box";
	_init_tracker_int($img,$box,$tn,$$tracker,$$mat);
	say "tracker pointer $$tracker, mat pointer $$mat, box $box";
	return ($tracker,$box,$mat);
}
EOP
),
	Doc=><<"EOD",

=head2 init_tracker - initialize OpenCV tracker 


Call with 
	
	($tracker,$box) = init_tracker ( $img, $tn, [$box, [ $mat ]] );

The first argument $img is the data, e.e. anything that fits a Mat object.
$tn is the tracker, in this order, strarting with 0: 
	
	["BOOSTING", "MIL", "KCF", "TLD","MEDIANFLOW", "GOTURN", "MOSSE", "CSRT"};

$box is a 4-integer array (x,y,width,height) holding the bounding box.
$mat is a reference to the Mat object.
$tracker is a reference to the tracker object. 



EOD
);

pp_def('update_tracker',
	Pars=>'float m(k,l); [o] b(j);',
	OtherPars => "TrackerWrapper * twi; MatWrapper * mwi",
	Code =>pp_line_numbers(__LINE__,
 	q{
   		printf ("twi %d ",$COMP(twi));
		struct bBox  box;
		MatWrapper * mw = $COMP(mwi);
		TrackerWrapper * tw = $COMP(twi);
		setData(mw,$P(m),cvT.f32c1);
		update_tracker(tw,mw,& box);
		$b(j=>0)=box.x;
		$b(j=>1)=box.y;
		$b(j=>2)=box.width;
		$b(j=>3)=box.height;
		//return;
	},
	),
        PMCode => pp_line_numbers(__LINE__,
<<'EOPM',
	sub update_tracker {
		my ($mat,$tw,$mw)=@_;
		_update_tracker_int($mat,$box,$$tw,$$mw);
		$box;
	}
EOPM
),
	Doc=>"update the tracker box.\n",
	);



pp_add_boot << 'EOB';

	tw_init();
	printf ("init done (autoinclude)\n");


EOB



pp_done();

